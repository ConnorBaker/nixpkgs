{
  lib,
  buildPythonPackage,
  fetchFromGitHub,
  cython_0,
  fastrlock,
  numpy,
  pytestCheckHook,
  mock,
  setuptools,
  cudaPackages,
  autoAddDriverRunpath,
  pythonOlder,
  fetchpatch
}:
let
  # General CUDA dependencies
  inherit (cudaPackages)
    cuda_cudart
    cuda_nvcc
    cuda_nvrtc
    cuda_nvtx
    cuda_profiler_api
    libcublas
    libcufft
    libcurand
    libcusolver
    libcusparse
    nccl
    ;

  # Specific CUDA dependencies
  cudnn = cudaPackages.cudnn_8_8;
  libcutensor = cudaPackages.libcutensor_2_0;
  libcusparse_lt = cudaPackages.libcusparse_lt_0_6;
in
# https://docs.cupy.dev/en/v13.1.0/install.html
assert lib.assertMsg (cudaPackages ? cudnn_8_8) "cupy requires cudnn 8.8";
assert lib.assertMsg (cudaPackages ? libcutensor_2_0) "cupy requires cutensor 2.0";
# NOTE: We apply a patch so we can use 0.6 instead of 0.2.
assert lib.assertMsg (cudaPackages ? libcusparse_lt_0_6) "cupy requires cusparseLt 0.6";
buildPythonPackage rec {
  pname = "cupy";
  version = "13.2.0";
  pyproject = true;

  build-system = [
    cython_0
    fastrlock
    setuptools
  ];

  disabled = pythonOlder "3.9";

  src = fetchFromGitHub {
    owner = "cupy";
    repo = "cupy";
    rev = "v${version}";
    hash = "sha256-vZAtpIZztmsYeJeuq7yl7kgZse2azrIM3efHDmUswJI=";
    fetchSubmodules = true;
  };

  patches = [
    (fetchpatch {
      url =
        "https://github.com/cfhammill/cupy/commit/67526c756e4a0a70f0420bf0e7f081b8a35a8ee5.patch";
      hash = "sha256-WZgexBdM9J0ep5s+9CGZriVq0ZidCRccox+g0iDDywQ=";
    })
    # Vendored from https://github.com/cupy/cupy/pull/8074 on 2024-05-30
    # Created by checking out the v13.1.0 tag and manually cherry-picking all the commits which weren't
    # the author merging main into the branch. Then generated by `git diff -p tags/v13.1.0`.
    # NOTE: The PR doesn't apply cleanly to 13.1.0, so it was necessary to manually cherry-pick the commits.
    ./patch-for-cusparseLt-0.6.1.patch
  ];

  # See https://docs.cupy.dev/en/v10.2.0/reference/environment.html. Seting both
  # CUPY_NUM_BUILD_JOBS and CUPY_NUM_NVCC_THREADS to NIX_BUILD_CORES results in
  # a small amount of thrashing but it turns out there are a large number of
  # very short builds and a few extremely long ones, so setting both ends up
  # working nicely in practice.
  preConfigure = ''
    export CUPY_NUM_BUILD_JOBS="$NIX_BUILD_CORES"
    export CUPY_NUM_NVCC_THREADS="$NIX_BUILD_CORES"
  '';

  nativeBuildInputs = [
    autoAddDriverRunpath
    cuda_nvcc
  ];

  buildInputs = [
    cuda_cudart # <cuda_runtime_api.h> -lcudart
    cuda_nvrtc # <nvrtc.h> # -lnvrtc
    cuda_nvtx # <nvtx3/nvToolsExt.h>
    cuda_profiler_api # <cuda_profiler_api.h>
    cudnn # <cudnn.h>
    libcublas # <cublas_v2.h> -lcublas
    libcufft # <cufft.h> -lcufft
    libcurand # <curand.h> -lcurand
    libcusolver # <cusolverDn.h> -lcusolver
    libcusparse_lt # <cusparseLt.h> -lcusparseLt
    libcusparse # <cusparse.h> -lcusparse
    libcutensor # <cutensor.h> -lcutensor
    nccl # <nccl.h> -lnccl
  ];

  dependencies = [
    fastrlock
    numpy
  ];

  nativeCheckInputs = [
    pytestCheckHook
    mock
  ];

  # Won't work with the GPU, whose drivers won't be accessible from the build
  # sandbox
  doCheck = false;

  enableParallelBuilding = true;

  meta = with lib; {
    description = "NumPy-compatible matrix library accelerated by CUDA";
    homepage = "https://cupy.chainer.org/";
    changelog = "https://github.com/cupy/cupy/releases/tag/v${version}";
    license = licenses.mit;
    platforms = [ "x86_64-linux" ];
    maintainers = with maintainers; [ hyphon81 ];
  };
}
